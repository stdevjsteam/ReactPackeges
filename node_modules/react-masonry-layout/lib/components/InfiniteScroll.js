'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (ComposedComponent) {
  var _class, _temp;

  return _temp = _class = function (_Component) {
    _inherits(I, _Component);

    function I(props) {
      _classCallCheck(this, I);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(I).call(this, props));

      _this.handleScroll = _this.handleScroll.bind(_this);
      return _this;
    }

    _createClass(I, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (!this.props.infiniteScrollDisabled) {
          var infiniteScrollContainer = this.props.infiniteScrollContainer;


          if (infiniteScrollContainer === 'window') {
            window.addEventListener('scroll', this.handleScroll);
          } else {
            document.getElementById(infiniteScrollContainer).addEventListener('mousewheel', this.handleScroll);
          }
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (!this.props.infiniteScrollDisabled) {
          var infiniteScrollContainer = this.props.infiniteScrollContainer;


          if (infiniteScrollContainer === 'window') {
            window.removeEventListener('scroll', this.handleScroll);
          } else {
            document.getElementById(infiniteScrollContainer).removeEventListener('mousewheel', this.handleScroll);
          }
        }
      }
    }, {
      key: 'handleScroll',
      value: function handleScroll() {
        var _props = this.props;
        var infiniteScroll = _props.infiniteScroll;
        var infiniteScrollLoading = _props.infiniteScrollLoading;
        var infiniteScrollEnd = _props.infiniteScrollEnd;

        if (this.edgeDistance < this.props.infiniteScrollDistance && !infiniteScrollLoading && !infiniteScrollEnd) {
          infiniteScroll();
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'div',
            { ref: function ref(element) {
                _this2.containerElement = element;
              } },
            _react2.default.createElement(ComposedComponent, this.props)
          ),
          this.props.infiniteScrollLoading && this.props.infiniteScrollSpinner,
          this.props.infiniteScrollEnd && this.props.infiniteScrollEndIndicator
        );
      }
    }, {
      key: 'edgeDistance',
      get: function get() {
        return this.props.infiniteScrollEdge === 'bottom' ? this.containerElement.getBoundingClientRect().bottom - window.innerHeight : this.containerElement.getBoundingClientRect().top * -1;
      }
    }]);

    return I;
  }(_react.Component), _class.propTypes = {
    id: _propTypes2.default.string.isRequired,
    infiniteScroll: _propTypes2.default.func,
    infiniteScrollContainer: _propTypes2.default.string,
    infiniteScrollLoading: _propTypes2.default.bool,
    infiniteScrollEnd: _propTypes2.default.bool,
    infiniteScrollEdge: _propTypes2.default.oneOf(['top', 'bottom']),
    infiniteScrollDistance: _propTypes2.default.number,
    infiniteScrollDisabled: _propTypes2.default.bool,
    infiniteScrollSpinner: _propTypes2.default.element,
    infiniteScrollEndIndicator: _propTypes2.default.element
  }, _class.defaultProps = {
    infiniteScroll: function infiniteScroll() {},
    infiniteScrollContainer: 'window',
    infiniteScrollLoading: false,
    infiniteScrollEnd: false,
    infiniteScrollEdge: 'bottom',
    infiniteScrollDistance: 200,
    infiniteScrollDisabled: false,
    infiniteScrollSpinner: _react2.default.createElement(
      'div',
      null,
      'this is a loader'
    ),
    infiniteScrollEndIndicator: _react2.default.createElement(
      'div',
      null,
      'no more data'
    )
  }, _temp;
};