'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bricks = require('bricks.js');

var _bricks2 = _interopRequireDefault(_bricks);

var _InfiniteScroll = require('./InfiniteScroll');

var _InfiniteScroll2 = _interopRequireDefault(_InfiniteScroll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MasonryLayout = (0, _InfiniteScroll2.default)(_class = (_temp = _class2 = function (_Component) {
  _inherits(MasonryLayout, _Component);

  function MasonryLayout() {
    _classCallCheck(this, MasonryLayout);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(MasonryLayout).apply(this, arguments));
  }

  _createClass(MasonryLayout, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var instance = (0, _bricks2.default)({
        container: '#' + this.props.id,
        packed: this.props.packed,
        sizes: this.props.sizes
      });

      instance.resize(true);

      if (this.props.children.length > 0) {
        instance.pack();
      }

      this.bricksInstance = instance;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.children.length === 0 && this.props.children.length === 0) return;

      if (prevProps.children.length === 0 && this.props.children.length > 0) {
        return this.bricksInstance.pack();
      }

      if (prevProps.children.length !== this.props.children.length) {
        return this.bricksInstance.update();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.bricksInstance.resize(false);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var id = _props.id;
      var className = _props.className;
      var style = _props.style;
      var children = _props.children;

      return _react2.default.createElement(
        'div',
        {
          id: id,
          className: className,
          style: style
        },
        children
      );
    }
  }]);

  return MasonryLayout;
}(_react.Component), _class2.propTypes = {
  id: _propTypes2.default.string.isRequired,
  packed: _propTypes2.default.string,
  sizes: _propTypes2.default.array,
  style: _propTypes2.default.object,
  className: _propTypes2.default.string,
  children: _propTypes2.default.arrayOf(_propTypes2.default.element).isRequired
}, _class2.defaultProps = {
  style: {},
  className: '',
  packed: 'data-packed',
  sizes: [{ columns: 2, gutter: 20 }, { mq: '768px', columns: 3, gutter: 20 }, { mq: '1024px', columns: 6, gutter: 20 }]
}, _temp)) || _class;

exports.default = MasonryLayout;